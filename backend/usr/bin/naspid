#!/bin/bash
#set -x

# Sources configuration files in /etc/naspi/naspi.d/ , if they exist
# The package defaults, then the global configuration, and last
# in the user directory.  The last read config file overwrites all
# other variables allowing more user end tweaks.  Be careful on the user's
# directory, it may need to be a full path without the ~/

PROG=${0##*/}
SRC_PATH=/etc/naspi/${PROG}.d

CONTROL_FILE="/tmp/naspid.control"
NASPID_LOCK_FILE=/var/lock/${PROG}.lock
ERROR_FILE=/usr/share/naspi/errors
#
# Source the errors file
#
. /etc/naspi/errors

#
# Test user and group id for root
#
if [[ $(id -u) != 0 ]]&&[[ $(id -g) != 0 ]]; then
	echo -e "${E_ROOT[0]}"
	exit "${E_ROOT[1]}"
fi


#
# Creates the error log if missing
#
#if [[ ! -e $LOG ]]; then
	touch $LOG
#fi

#
# sources each of the 3 configuration file locations
#
CONFIG_SET=FALSE
CONFIG_PATHS=("/etc/naspi" '~' '~/naspi')

for EACH_CONFIG in "${CONFIG_PATHS[@]}"; do
	
	if [[ -f $EACH_CONFIG/$PROG.conf ]]; then
		. "$EACH_CONFIG/$PROG.conf"
		CONFIG_SET=TRUE
	fi

done

#
# Checks that a configuration was set
#
#if [[ $CONFIG_SET = FALSE ]]; then
	#log $E_CONFIG $M_CONFIG
#fi

set +x

# PARSE COMMAND LINE ARGUMENTS FOR THE CORESPONDING FUNCTION
#set -x

if [[ -z $1 ]];then
	already_running
	echo "Daemon not running"
fi

#
#
#
function create_missing_directory() {
	#set -x
	if [[ ! -e $1 ]] && [[ ! -d $1 ]]; then
		echo "Created directory: $1"
		mkdir -p "$1"
	fi
	set +x
}

#
# Run external script to query frontend for source information
#
function get_data() {
	
	#set -x
	if [[ -x "$LOCATION"/modules/files/sources/sourcedata ]]; then
		"$LOCATION"/modules/files/sources/./sourcedata $1 $2
	else
		log $E_SOURCE $M_SOURCE
	fi
	
	set +x
}

#
#
#
function log() {

	#set -x
	# Log any messages
	if [[ $# -eq 1 ]]; then
		echo $1 >> $LOG
	
	# Log error messages if logging is enabled
	elif [[ $# -ge 2 ]] && [[ $E_LOGGING == TRUE ]];then
		
		# If mount error then include the mount's name
		if [[ $# -eq 3 ]] && [[ $1 -eq 10 ]]; then
			echo "[ERROR $1]: $2 $3" >> $LOG
		
		# Log the error code and message to log file
		elif [[ $# -eq 2 ]]; then
			echo "[ERROR $1]: $2" >> $LOG
		fi
	fi
	
	set +x
}

#
#
#
function stop_service(){

	# set -x
	set -f;IFS=$'\n'
	ps=($(ps -e | grep -e ' naspid$' -e ' cat$'))
	ps=(${ps[@]%%[?|p]*})
	unset IFS;set +f
	
	kill $(echo ${ps[@]% *})
	export RUN=FALSE
	
	set +x
}

#
#
#
function input() {
        # set -x
        case $1 in
                mount )
                        . $SRC_PATH/$1.inc $2
                        ;;
                update )
                        . $SRC_PATH/$1.inc $2
                        ;;
                remove )
                        remove_source
                        ;;
                *)
                        echo "${INPUT[@]}"
                        #echo $E_CONTROL
                        #exit
                        ;;
        esac
        set +x
}

#
#
#
function start_service(){
	# set -x
	
	RUN=TRUE
	
	echo "Starting Listener" >> $LOG
	echo $PPID >> $NASPID_LOCK_FILE
	
	mkfifo -m 0600 $CONTROL_FILE
	chown "$APACHE_USER:$APACHE_USER" $CONTROL_FILE
	
	while [[ $RUN = TRUE ]]; do
	        INPUT=($(cat $CONTROL_FILE))
		echo "sending ${INPUT[@]}" >> $LOG
		input ${INPUT[@]}
	done

	set +x
}

# Creates any non-existant directories
create_missing_directory $FSTAB_DIR
create_missing_directory $HOME/$CREDENTIALS

#
#
#
case $1 in
	start)
		trap 'rm $NASPID_LOCK_FILE $CONTROL_FILE && exit' EXIT INT
		$1_service
		;;
	stop)
		$1_service
		;;
	*)
		echo "$BAD_USAGE" 1>&2
		echo "$USAGE "
		;;		
esac
