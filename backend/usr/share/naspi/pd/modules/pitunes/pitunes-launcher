#!/usr/bin/php
<?///////////////////////////////////////////////////////////////////////////////////
//
//

$sockDir = "/tmp/naspi/pitunes";
$sockFile = "pitunes.sock";

$descriptorspec = array(
	0 => array("pipe", "r"), // stdin is a pipe that the child will read from
	1 => array("pipe", "w"), // stdout is a pipe that the child will write to
	2 => array("file", "/tmp/errorout.txt", "a") // stderr is a file to write to
);

$ph = proc_open("./tunemanager.php", $descriptorspec, $pipes);

stream_set_blocking($pipes[1], 0);

if(!file_exists($sockDir)) { `mkdir $sockDir -p`; }
if(file_exists($sockDir."/".$sockFile)) 
{
	$cmd = "rm ".$sockDir."/".$sockFile;
	`$cmd`;
}

echo "Creating Unix Socket for PiTunes\n";
$socket = socket_create(AF_UNIX, SOCK_STREAM, 0);

socket_bind($socket, $sockDir."/".$sockFile);
$spermcmd = "chown naspi:naspi ".$sockDir."/".$sockFile;
`$spermcmd`;

if(!socket_listen($socket))
{
	echo "NAS-Pi PiTunes: socket_listen returned false!\n";
	echo "\t".socket_strerror(socket_last_error($socket))."\n";
	exit;
}

socket_select($temp = array($socket), $temp = null, $temp = null, 20);

$KeepRunning = true;
while($KeepRunning)
{
	$client = socket_accept($socket);
	socket_set_nonblock($client);
	
	$DoConnection = true;
	while($DoConnection)
	{
		$buffer = socket_read($client, 512, PHP_NORMAL_READ);
		if(strlen($buffer) == 0 || $buffer === false)
		{
			$DoConnection = false;
		}
		else
		{
			$buffer = trim($buffer);
			if($buffer == "exit" || $buffer == "quit")
			{
				$DoConnection = false;
			}
			else
			{
				fwrite($pipes[0], $buffer."\n");
			}
		}
		
		usleep(100000);
		$strmloop = true;
		while($strmloop)
		{
			$instr = stream_get_line($pipes[1], 512, "\n");
			if(strlen($instr) > 0) { socket_write($client, $instr."\n", strlen($instr."\n")); }
			else { $strmloop = false; }
		}
		
		
		
		
	}
	
	socket_close($client);
}



?>
